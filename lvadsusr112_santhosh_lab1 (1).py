# -*- coding: utf-8 -*-
"""LVADSUSR112_Santhosh_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/127ONWJq8xWOjWdT8RLcYeNPUgKai1h_o
"""

import pandas as pd
wine=pd.read_csv('/content/winequality-red.csv')
wine

null_values=wine.isnull().sum()

wine.duplicated().sum()

values=wine.describe()

import matplotlib.pyplot as plt
wine.plot(kind='box')

for index in values.columns:
  wine[index].plot(kind='hist')
  plt.xlabel(index)
  plt.show()

import numpy as np
for index in null_values.index:
  wine[index].replace(np.NaN,values.loc['50%',index],inplace=True)
wine.describe()
wine.isnull().sum()

wine.duplicated().sum()

wine.drop_duplicates(inplace=True)

wine.duplicated().sum()

q1=values.loc['25%']
q3=values.loc['75%']
iqr=q3-q1
uw=q3+iqr*1.5
lw=q1-iqr*1.5
for index in q3.index:
  for row in wine[(wine[index]>uw[index])|(wine[index]<lw[index])].index:
    wine.loc[row,index]=values.loc['50%',index]

wine.info()

wine.corr()['quality']

required=wine[['volatile acidity','citric acid','sulphates','alcohol','quality']]

required.corr()['quality']
required['quality'].value_counts()
for index in required.index:
  if required.loc[index,'quality'] in range(3,6):
    required.loc[index,'Quality Value']='Bad'
  else:
    required.loc[index,'Quality Value']='Good'
for index in required.index:
  if required.loc[index,'Quality Value']=='Bad':
    required.loc[index,'Class']=0
  else:
    required.loc[index,'Class']=1
required

from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report
k=range(1,11)
sse=[]
for i in k:
  KM=KMeans(n_clusters=i)
  KM.fit_predict(required.iloc[:,:4])
  sse.append(KM.inertia_)
plt.plot(k,sse,marker='o')

xtrain,xtest,ytrain,ytest=train_test_split(required.iloc[:,:4],required.iloc[:,-1])
KNN=KNeighborsClassifier(n_neighbors=2)
KNN=KNN.fit(xtrain,ytrain)
result=KNN.predict(xtest)
print(accuracy_score(ytest,result))
print(classification_report(ytest,result))